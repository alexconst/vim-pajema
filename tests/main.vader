# Tests:
#   - conversion from pandoc markdown to html
#   - browser preview of html
#   - conversion from pandoc markdown to jekyll markdown


# Note that 'input_file_bro.md' is referred as content in a Given markdown file
Before:
  let g:test_dir = '/tmp/vim-pajema/'
  let g:md_filename = g:test_dir . '_drafts/input_file.md'
  let g:html_filename = g:test_dir . '_drafts/input_file.html'
  let g:md_filename_bro = g:test_dir . '_drafts/input_file_bro.md'
  let g:jekyll_filename = g:test_dir . '_posts/2016-01-11-input-file.markdown'
  let g:log_file = g:test_dir . 'vader.log'
  let g:vim_pajema_browser = '/usr/bin/chromium --password-store=basic'
  let g:test_browser_tabs_check = "strings $HOME/.config/chromium/Default/Sessions/Session_* | grep -E '^file:///' | sort -u"
  let g:browser_close_cmd = "xdotool windowactivate --sync $(xwininfo -root -tree | grep input_file.md | awk '{print $1;}') key 'control+w'"
  :silent! 4,400bwipeout


# if things go south, when troubleshooting these may be helpful
#  silent execute '!rm -f ' . g:jekyll_filename
#  execute ':bd'
#  execute ':w! ' . '/tmp/vim-pajema/vader_dump.txt'


##########################################
# clear all content from the files we'll use
# we can't use Vader's After directive because that is done after each test, but
# we need to maintain a state since we'll work with multiple files
##########################################
Given markdown;
---
layout: post
title:  'Vagrant – automating environment deployment'
author: 'Alexandre Constantino'
date:   2016-01-28
categories: devops
tags:       tutorial vagrant
---

# About

markdown brother in arms file

This is a guide on Vagrant which covers most of what there is to known about it. If you've found other resources to be confusing, not going through all the steps, or leaving out information; then you may find this tutorial helpful.
In any case, if you just need a cheat sheet then jump into the [About](#about).

Execute (prepare test environment):
# create work directories
  silent execute '!mkdir -p ' . g:test_dir . '{_drafts,_posts}'
# save the support file
  execute ':w! ' . g:md_filename_bro
# clear file contents
  execute ':tabe ' . g:log_file
  :1,$d
  :w
  execute ':w! ' . g:md_filename
  execute ':w! ' . g:html_filename
  execute ':w! ' . g:jekyll_filename






##########################################
# check html file is created
##########################################
Given markdown;
# chap A

hello

## chap B

bye

Execute (check html file is created):
# vim-pajema needs a real file with known whereabouts to work,
# so we save and open it
  execute ':w! ' . g:md_filename
  execute ':edit ' . g:md_filename
# convert to html
  normal ,h
# open generated html and verify it
  execute ':edit ' . g:html_filename
  AssertEqual getline('1'), '<!DOCTYPE html>'
# navigate and skip heading
  /<h1\>
# navigate to chapter
  /<h1\>
  AssertEqual getline('.'), '<h1 data-number="1"><span class="header-section-number">1</span> chap A</h1>'
# navigate to first (and only) paragraph
  /<p\>
  AssertEqual getline('.'), '<p>hello</p>'







##########################################
# check browser opens generated html file
##########################################
Given markdown;
# chap

check that generated html file gets open in browser

Execute (check browser opens generated html file):
# save the given markdown file
  execute ':w! ' . g:md_filename
# open md file
  execute ':edit ' . g:md_filename
# convert to html
  normal ,h
# open html in firefox
  normal ,p
# give it some time to refresh the sessions file
  silent execute '!sleep 3s'
# execute command that queries the browser open tabs
  let cmd = g:test_browser_tabs_check . " | grep " . g:html_filename[:-1] . ' > ' . g:log_file
  silent execute '!' . cmd
# close open buffer, without it vim/vader get crazy even though and independently of the use of :edit or :tabe
  execute ':bd'
# open file and assert (NOTE: the output may differ between firefox and chromium, namely the use of double quotes in the output)
  execute ':edit ' . g:log_file
  AssertEqual getline('1'), 'file:///tmp/vim-pajema/_drafts/input_file.html'
# close browser
  silent execute '!' . g:browser_close_cmd








##########################################
# check conversion from pandoc to jekyll
##########################################
Given markdown;
---
layout: post
title:  'Packer – automating virtual machine image creation'
author: 'Alexandre Constantino'
date:   2016-01-11
categories: devops
tags:       tutorial packer
---

# What is Packer

Packer is a tool for automating the creation of identical virtual machine images for multiple platforms from a single source configuration. Allowing for the image creation process to execute in parallel for multiple machine images.
Supported platforms include: AWS EC2 AMI, DigitalOcean, Docker, Google Compute Engine, OpenStack, Parallels, QEMU, VirtualBox, VMware.
And the provisioning (ie: installation and configuration of software into the machine image) can be done using one or more of the supported configuration management tools: shell scripts, Ansible, Chef, Puppet, Salt.
After an image is created it's possible to run a post-processor to better suite the desired intent, for example vSphere (to upload an image to an endpoint) or [Vagrant](input_file_bro.md) (to convert the image into a valid Vagrant box).
The advantage of using Packer is that it allows creating the same image for multiple platforms and also makes possible for problem resolution to be done at image creation. Another benefit is that after an image is created you can spin a fully configured machine in just a couple of minutes.
The outputs produced by Packer (eg: AWS AMI IDs; VMware image files) are called artifacts.

Execute (check conversion from pandoc to jekyll):
# save the given markdown file
  execute ':w! ' . g:md_filename
# open md file
  execute ':edit ' . g:md_filename
# convert to jekyll
  normal ,j
# check that the generated file has the correct name
  AssertEqual expand('%:p'), g:jekyll_filename
# check paragraph with trailing spaces
  /\<parallel\>
  AssertEqual getline('.'), 'parallel for multiple machine images.  '
# check jekyll reference
  /\<endpoint\>
  AssertEqual getline('.'), 'to an endpoint) or [Vagrant]({% post_url 2016-01-28-input-file-bro %}) (to convert the image'







##########################################
# check conversion from pandoc to jekyll using Kramdown
##########################################
Given markdown;
---
layout: post
title:  'some title'
author: 'someone'
date:   2016-01-11
---

# chap

Vimscript: the final frontier. These are the commits from programmer Foo

Naked links (test for workaround on jekyll 3 bugs):
<https://github.com/github/pages-gem/issues/231>
<https://github.com/jekyll/jekyll/issues/4627>

  http://debian.org

How about this one [this is another](https://foo.com)
And can it <https://work.com> with two <http://urls.com>?


Execute (check conversion from pandoc to jekyll 3 with kramdown):
# enable kramdown and toc include line
  let g:vim_pajemas_kramdown=1
  let g:vim_pajemas_kramdown_toc=1
# save the given markdown file
  execute ':w! ' . g:md_filename
  execute ':bd'
# open md file
  execute ':edit ' . g:md_filename
# convert to jekyll
  normal ,j
# check that the generated file has the correct name
  AssertEqual expand('%:p'), g:jekyll_filename
# check include toc line
  /\<include\>
  AssertEqual getline('.'), '{% include toc.md %}'
# check naked link with newline
  /231
  AssertEqual getline('.'), '["https://github.com/github/pages-gem/issues/231"]("https://github.com/github/pages-gem/issues/231")  '
# check naked link without newline
  /4627
  AssertEqual getline('.'), '["https://github.com/jekyll/jekyll/issues/4627"]("https://github.com/jekyll/jekyll/issues/4627")'
# check naked link without braces and with leading whitespace
  /debian
  AssertEqual getline('.'), '["http://debian.org"]("http://debian.org")'





